{"version":3,"sources":["../src/utils/request.js"],"names":["handleBodyResponse","res","body","resolve","reject","logger","test","headers","trim","error","JSONObject","JSONError","JSONErrors","errors","err","Error","responseBody","Request","hostname","agent","errMessage","protocol","run","method","path","data","dataString","options","port","gzip","Object","assign","Buffer","from","length","Promise","req","https","request","info","toUpperCase","HTTPS_PROTOCOL","Math","round","statusCode","debug","statusMessage","xRetryAfterHeader","setTimeout","then","catch","on","chunk","zlib","gunzip","toString","write","end"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n\"use strict\";\n\nimport https from \"https\";\nimport zlib from \"zlib\";\nimport { HTTPS_PROTOCOL } from \"../constants\";\nimport { handleConversionObjectToString, handleConversionStringToObject, handleConversionStringToUppercase } from \"./convertValues\";\n\n// Handle parsing the response from the BigCommerce API\nfunction handleBodyResponse(res, body, resolve, reject, logger) {\n\ttry {\n\t\tif (!/application\\/json/.test(res.headers[\"content-type\"]) || body.trim() === \"\") {\n\t\t\tlogger.error(\"The response body from the BigCommerce API is not in JSON format.\");\n\n\t\t\treturn resolve(body);\n\t\t}\n\n\t\t// Convert string to object\n\t\tconst JSONObject = handleConversionStringToObject(body);\n\n\t\t// Check for errors in the body response, if there is found, reject the promise\n\t\tconst JSONError = JSONObject?.error ?? null;\n\t\tconst JSONErrors = JSONObject?.errors ?? null;\n\n\t\tif (JSONError !== null || JSONErrors !== null) {\n\t\t\tconst err = new Error(JSONError || handleConversionObjectToString(JSONErrors));\n\n\t\t\treturn reject(err);\n\t\t}\n\n\t\t// Return the body response as a JSON object\n\t\treturn resolve(JSONObject);\n\t} catch (err) {\n\t\terr.responseBody = body;\n\n\t\treturn reject(err);\n\t}\n}\nclass Request {\n\tconstructor(hostname = null, { headers = {}, agent = null, logger = null } = {}) {\n\t\thostname == null && headers == null\n\t\t\t? (() => {\n\t\t\t\t\tconst errMessage = new Error(\"The hostname and headers are required to make the call to the server.\");\n\n\t\t\t\t\tthrow errMessage;\n\t\t\t  })()\n\t\t\t: null;\n\n\t\tlogger == null\n\t\t\t? (() => {\n\t\t\t\t\tconst errMessage = new Error(\"The logger is required to make the call to the server. Something is wrong.\");\n\n\t\t\t\t\tthrow errMessage;\n\t\t\t  })()\n\t\t\t: null;\n\n\t\tthis.hostname = hostname;\n\t\tthis.headers = headers;\n\t\tthis.agent = agent;\n\t\tthis.logger = logger;\n\t\tthis.protocol = \"https:\";\n\t}\n\n\t// Handle running plugin\n\trun(method, path, data = null) {\n\t\tconst dataString = data !== null ? handleConversionObjectToString(data) : null;\n\n\t\tconst options = {\n\t\t\tpath: path,\n\t\t\tprotocol: this.protocol,\n\t\t\thostname: this.hostname,\n\t\t\tport: 443,\n\t\t\tmethod: handleConversionStringToUppercase(method),\n\t\t\tgzip: true,\n\t\t\theaders: Object.assign(\n\t\t\t\t{\n\t\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t},\n\t\t\t\tthis.headers\n\t\t\t)\n\t\t};\n\n\t\tif (this.agent !== null) {\n\t\t\toptions.agent = this.agent;\n\t\t}\n\n\t\tif (dataString !== null) {\n\t\t\toptions.headers[\"Content-Length\"] = Buffer.from(dataString).length;\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = https.request(options, (res) => {\n\t\t\t\t// Send log message when requesting data\n\t\t\t\tthis.logger.info(`${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}`);\n\n\t\t\t\tif (Math.round(res.statusCode / 100) === 2) {\n\t\t\t\t\tthis.logger.debug(`${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t} else if (Math.round(res.statusCode / 100) === 4 || Math.round(res.statusCode / 100) === 5) {\n\t\t\t\t\tthis.logger.debug(`${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logger.debug(`${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t}\n\n\t\t\t\tlet body = \"\";\n\n\t\t\t\t// Handle API rate limit\n\t\t\t\tconst statusCode = res.statusCode;\n\n\t\t\t\tif (Math.round(statusCode / 100) === 4) {\n\t\t\t\t\tif (statusCode === 429) {\n\t\t\t\t\t\tconst xRetryAfterHeader = res?.headers?.[\"x-retry-after\"] ?? null;\n\n\t\t\t\t\t\tif (xRetryAfterHeader !== null) {\n\t\t\t\t\t\t\tthis.logger.info(`The BigCommerce API rate limit has been reached. Please wait ${xRetryAfterHeader} seconds before making another request.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn setTimeout(() => {\n\t\t\t\t\t\t\t// Send log message when restarting request\n\t\t\t\t\t\t\tthis.logger.info(\"Restarting request...\");\n\n\t\t\t\t\t\t\t// Send log message when restarting request\n\t\t\t\t\t\t\tthis.logger.info(`${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}`);\n\n\t\t\t\t\t\t\tthis.run(method, path, data).then(resolve).catch(reject);\n\t\t\t\t\t\t}, xRetryAfterHeader * 1000);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Append the response body to the body variable\n\t\t\t\tres.on(\"data\", (chunk) => (body += chunk));\n\n\t\t\t\t// End BigCommerce response execution\n\t\t\t\tres.on(\"end\", () => {\n\t\t\t\t\tif (statusCode >= 400 && statusCode <= 600) {\n\t\t\t\t\t\tconst errMessage = new Error(`BigCommerce API request failed with status code ${statusCode}.`);\n\t\t\t\t\t\terrMessage.statusCode = statusCode;\n\t\t\t\t\t\terrMessage.body = body;\n\n\t\t\t\t\t\treturn reject(errMessage);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Calling gzip method\n\t\t\t\t\treturn zlib.gzip(body, (err, data) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Calling gunzip method\n\t\t\t\t\t\tzlib.gunzip(data, (err, data) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn handleBodyResponse(res, data.toString(\"utf8\"), resolve, reject, this.logger);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdataString !== null\n\t\t\t\t? (() => {\n\t\t\t\t\t\t// Send log message when sending data\n\t\t\t\t\t\tthis.logger.info(\"Sending BigCommerce data...\");\n\n\t\t\t\t\t\t// Send log message when requesting data\n\t\t\t\t\t\tthis.logger.info(`${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}`);\n\n\t\t\t\t\t\treq.write(dataString);\n\n\t\t\t\t\t\tthis.logger.info(\"Sending complete.\");\n\t\t\t\t  })()\n\t\t\t\t: null;\n\n\t\t\t// Handle BigCommerce API request errors\n\t\t\treq.on(\"error\", (err) => reject(err));\n\n\t\t\t// End BigCommerce request execution\n\t\t\treq.end();\n\t\t});\n\t}\n}\n\nexport default Request;\n"],"file":"request.js"}