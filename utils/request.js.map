{"version":3,"file":"request.js","names":["handleBodyResponse","res","body","resolve","reject","test","headers","trim","console","error","FG_RED","JSONObject","handleConversionStringToObject","JSONError","JSONErrors","errors","err","Error","handleConversionObjectToString","responseBody","Request","hostname","failOnLimitReached","agent","errMessage","protocol","run","method","path","data","dataString","options","port","handleConversionStringToUppercase","gzip","Object","assign","Buffer","from","length","Promise","req","https","request","log","FG_GREEN","toUpperCase","HTTPS_PROTOCOL","Math","round","statusCode","FG_BLUE","statusMessage","FG_WHITE","FG_CYAN","xRetryAfterHeader","setTimeout","FG_YELLOW","then","catch","on","chunk","zlib","gunzip","toString","write","end"],"sources":["../src/utils/request.js"],"sourcesContent":["\"use strict\";\n\nimport https from \"https\";\nimport zlib from \"zlib\";\nimport { FG_BLUE, FG_CYAN, FG_GREEN, FG_RED, FG_WHITE, FG_YELLOW, HTTPS_PROTOCOL } from \"../constants\";\nimport { handleConversionObjectToString, handleConversionStringToObject, handleConversionStringToUppercase } from \"./convertValues\";\n\n// Handle parsing the response from the BigCommerce API\nfunction handleBodyResponse(res, body, resolve, reject) {\n\ttry {\n\t\tif (!/application\\/json/.test(res.headers[\"content-type\"]) || body.trim() === \"\") {\n\t\t\tconsole.error(FG_RED, \"\\nThe response body from the BigCommerce API is not in JSON format.\");\n\n\t\t\treturn resolve(body);\n\t\t}\n\n\t\t// Convert string to object\n\t\tconst JSONObject = handleConversionStringToObject(body);\n\n\t\t// Check for errors in the body response, if there is found, reject the promise\n\t\tconst JSONError = JSONObject?.error ?? null;\n\t\tconst JSONErrors = JSONObject?.errors ?? null;\n\n\t\tif (JSONError !== null || JSONErrors !== null) {\n\t\t\tconst err = new Error(JSONError || handleConversionObjectToString(JSONErrors));\n\n\t\t\treturn reject(err);\n\t\t}\n\n\t\t// Return the body response as a JSON object\n\t\treturn resolve(JSONObject);\n\t} catch (err) {\n\t\terr.responseBody = body;\n\n\t\treturn reject(err);\n\t}\n}\nclass Request {\n\tconstructor(hostname = null, { headers = {}, failOnLimitReached = false, agent = null } = {}) {\n\t\thostname == null && headers == null\n\t\t\t? (() => {\n\t\t\t\t\tconst errMessage = new Error(\"The hostname and headers are required to make the call to the server.\");\n\n\t\t\t\t\tthrow errMessage;\n\t\t\t  })()\n\t\t\t: null;\n\n\t\tthis.hostname = hostname;\n\t\tthis.headers = headers;\n\t\tthis.failOnLimitReached = failOnLimitReached;\n\t\tthis.agent = agent;\n\t\tthis.protocol = \"https:\";\n\t}\n\n\t// Handle running plugin\n\trun(method, path, data = null) {\n\t\tconst dataString = data !== null ? handleConversionObjectToString(data) : null;\n\n\t\tconst options = {\n\t\t\tpath,\n\t\t\tprotocol: this.protocol,\n\t\t\thostname: this.hostname,\n\t\t\tport: 443,\n\t\t\tmethod: handleConversionStringToUppercase(method),\n\t\t\tgzip: true,\n\t\t\theaders: Object.assign(\n\t\t\t\t{\n\t\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t},\n\t\t\t\tthis.headers\n\t\t\t)\n\t\t};\n\n\t\tif (this.agent !== null) {\n\t\t\toptions.agent = this.agent;\n\t\t}\n\n\t\tif (dataString !== null) {\n\t\t\toptions.headers[\"Content-Length\"] = Buffer.from(dataString).length;\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = https.request(options, (res) => {\n\t\t\t\t// Send log message when requesting data\n\t\t\t\tconsole.log(FG_GREEN, `\\n${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}`);\n\n\t\t\t\tif (Math.round(res.statusCode / 100) === 2) {\n\t\t\t\t\tconsole.log(FG_BLUE, `\\nStatus:`, FG_GREEN, `${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t} else if (Math.round(res.statusCode / 100) === 4 || Math.round(res.statusCode / 100) === 5) {\n\t\t\t\t\tconsole.log(FG_BLUE, `\\nStatus:`, FG_RED, `${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(FG_BLUE, `\\nStatus:`, FG_WHITE, `${res.statusCode + \" \" + res.statusMessage}`);\n\t\t\t\t}\n\n\t\t\t\tconsole.log(FG_BLUE, `\\nHeaders:`, FG_CYAN, `${handleConversionObjectToString(res.headers)}\\n`);\n\n\t\t\t\tlet body = \"\";\n\n\t\t\t\t// Handle API rate limit\n\t\t\t\tconst statusCode = res.statusCode;\n\n\t\t\t\tif (Math.round(statusCode / 100) === 4) {\n\t\t\t\t\tif (statusCode === 429) {\n\t\t\t\t\t\tconst xRetryAfterHeader = res?.headers?.[\"x-retry-after\"] ?? null;\n\n\t\t\t\t\t\tif (this.failOnLimitReached) {\n\t\t\t\t\t\t\tif (xRetryAfterHeader !== null) {\n\t\t\t\t\t\t\t\tconsole.log(FG_RED, `\\nThe BigCommerce API rate limit has been reached. Please wait ${xRetryAfterHeader} seconds before making another request.`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn setTimeout(() => {\n\t\t\t\t\t\t\t\t// Send log message when restarting request\n\t\t\t\t\t\t\t\tconsole.log(FG_YELLOW, \"\\nRestarting request...\");\n\n\t\t\t\t\t\t\t\t// Send log message when restarting request\n\t\t\t\t\t\t\t\tconsole.log(FG_GREEN, `\\n${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}\\n\\n`);\n\n\t\t\t\t\t\t\t\tthis.run(method, path, data).then(resolve).catch(reject);\n\t\t\t\t\t\t\t}, xRetryAfterHeader * 1000);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Append the response body to the body variable\n\t\t\t\tres.on(\"data\", (chunk) => (body += chunk));\n\n\t\t\t\t// End BigCommerce response execution\n\t\t\t\tres.on(\"end\", () => {\n\t\t\t\t\tif (statusCode >= 400 && statusCode <= 600) {\n\t\t\t\t\t\tconst errMessage = new Error(`BigCommerce API request failed with status code ${statusCode}.`);\n\t\t\t\t\t\terrMessage.statusCode = statusCode;\n\t\t\t\t\t\terrMessage.body = body;\n\n\t\t\t\t\t\treturn reject(errMessage);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Calling gzip method\n\t\t\t\t\treturn zlib.gzip(body, (err, data) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Calling gunzip method\n\t\t\t\t\t\tzlib.gunzip(data, (err, data) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn handleBodyResponse(res, data.toString(\"utf8\"), resolve, reject);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdataString !== null\n\t\t\t\t? (() => {\n\t\t\t\t\t\t// Send log message when sending data\n\t\t\t\t\t\tconsole.log(FG_YELLOW, \"\\nSending BigCommerce data...\\n\");\n\n\t\t\t\t\t\t// Send log message when requesting data\n\t\t\t\t\t\tconsole.log(FG_GREEN, `\\n${\"[\" + method.toUpperCase() + \"] \" + HTTPS_PROTOCOL + this.hostname + path}\\n`);\n\n\t\t\t\t\t\treq.write(dataString);\n\n\t\t\t\t\t\tconsole.log(FG_GREEN, \"\\nSending complete.\\n\");\n\t\t\t\t  })()\n\t\t\t\t: null;\n\n\t\t\t// Handle BigCommerce API request errors\n\t\t\treq.on(\"error\", (err) => reject(err));\n\n\t\t\t// End BigCommerce request execution\n\t\t\treq.end();\n\t\t});\n\t}\n}\n\nexport default Request;\n"],"mappings":"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"}