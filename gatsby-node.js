"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_httpProxyMiddleware=require("http-proxy-middleware"),_micro=_interopRequireDefault(require("micro")),_winston=require("winston"),_constants=require("./constants"),_bigcommerce=_interopRequireDefault(require("./utils/bigcommerce")),_convertValues=require("./utils/convertValues");const handleCreateNodeFromData=(a,b,c)=>{const d={...a,id:c.createNodeId(`${b}-${a.id}`),bigcommerce_id:a.id,parent:null,children:[],internal:{type:b,content:(0,_convertValues.handleConversionObjectToString)(a),contentDigest:c.createContentDigest(a)}},e=Object.assign({},a,d);return c.createNode(e),e};exports.onPreInit=()=>{const a={levels:{info:1},colors:{info:"bold green"}};(0,_winston.addColors)(a.colors);const{combine:b,timestamp:c,colorize:d,simple:e}=_winston.format,f=(0,_winston.createLogger)({level:"info",levels:a.levels,format:b(d(),e(),c()),transports:[new _winston.transports.Console]});f.info("`gatsby-source-bigcommerce` plugin loaded successfully.")},exports.onCreateWebpackConfig=async({actions:a})=>{a.setWebpackConfig({resolve:{fallback:{crypto:!1,https:!1,zlib:!1}}})},exports.sourceNodes=async({actions:a,createNodeId:b,createContentDigest:c},d)=>{const{createNode:e}=a,{endpoints:f=null,clientId:g=null,secret:h=null,storeHash:i=null,accessToken:j=null,siteUrl:k=null,preview:l=!1,logLevel:m="info",agent:n=null,responseType:o="json",headers:p={}}=d,q=Object.assign({},a,{createContentDigest:c,createNodeId:b}),r=(0,_convertValues.handleConversionStringToLowercase)(k),s=(0,_convertValues.handleConversionStringToLowercase)(m),t=(0,_convertValues.handleConversionStringToLowercase)(o),u={levels:{error:0,debug:1,info:2},colors:{error:"bold red",debug:"bold blue",info:"bold green"}};(0,_winston.addColors)(u.colors);const{combine:v,timestamp:w,colorize:x,simple:y}=_winston.format,z=(0,_winston.createLogger)({level:s,levels:u.levels,format:v(x(),y(),w()),transports:[new _winston.transports.Console]});let A="";if(z.info("Checking BigCommerce plugin options..."),null!==f&&null!==g&&null!==h&&null!==i&&null!==j){const a=new _bigcommerce.default({clientId:g,accessToken:j,secret:h,storeHash:i,responseType:t,logger:z,agent:n,headers:p});if(f&&"object"==typeof f&&0<Object.keys(f).length?(z.info("Valid plugin options found. Proceeding with plugin initialization..."),z.info("Requesting endpoint data..."),await Promise.all(Object.entries(f).map(([b,c])=>a.get(c).then(a=>{const c="data"in a&&Array.isArray(a.data)?a.data:a;return"data"in a&&Array.isArray(a.data)?c.map(a=>handleCreateNodeFromData(a,b,q)):Array.isArray(a)?a.map(a=>handleCreateNodeFromData(a,b,q)):handleCreateNodeFromData(c,b,q)}))).then(()=>{z.info("All endpoint data have been fetched successfully.")}).catch(a=>{A=new Error(`An error occurred while fetching endpoint data. ${a}`)}).finally(()=>z.info("Requesting endpoint data complete."))):A=new Error("The `endpoints` object is required to make any call to the BigCommerce API"),_constants.IS_DEV&&l&&null!==r){z.info("Preview mode enabled. Subscribing you to BigCommerce API webhook...");const d={scope:"store/product/updated",is_active:!0,destination:`${r}/__BCPreview`};await a.get(_constants.BIGCOMMERCE_WEBHOOK_API_ENDPOINT).then(f=>{"data"in f&&0<Object.keys(f.data).length?(z.info("BigCommerce API webhook subscription already exists. Skipping subscription..."),z.info("BigCommerce API webhook subscription complete. Running preview server...")):(async()=>await a.post(_constants.BIGCOMMERCE_WEBHOOK_API_ENDPOINT,d).then(a=>{"data"in a&&0<Object.keys(a.data).length&&z.info("BigCommerce API webhook subscription created successfully. Running preview server...")}))();const g=(0,_micro.default)(async(d,f)=>{const g=await _micro.default.json(d),h=g.data.id,i=await a.get(`/catalog/products/${h}`),j=i.data;if(j.id){var k;e({...j,id:b(`${null!==(k=null===j||void 0===j?void 0:j.id)&&void 0!==k?k:`BigCommerceNode`}`),parent:null,children:[],internal:{type:`BigCommerceNode`,contentDigest:c(j)}}),z.info(`Updated node: ${j.id}`)}f.end("ok")});g.listen(8033,z.info(`Now listening to changes for live preview at /__BCPreview`))}).catch(a=>{A=new Error(`An error occurred while creating BigCommerce API webhook subscription. ${a}`)})}}else null==f&&(A=new Error("The `endpoints` are required to make any call to the BigCommerce API")),null==g&&(A=new Error("The `clientId` is required to make any call to the BigCommerce API")),null==h&&(A=new Error("The `secret` is required to make any call to the BigCommerce API")),null==i&&(A=new Error("The `storeHash` is required to make any call to the BigCommerce API")),null==j&&(A=new Error("The `accessToken` is required to make any call to the BigCommerce API"));if(""!==A){throw z.error(`${"Plugin terminated with errors..."}`),A}},exports.onCreateDevServer=({app:a})=>a.use("/__BCPreview/",(0,_httpProxyMiddleware.createProxyMiddleware)({target:`http://localhost:8033`,secure:!1}));
//# sourceMappingURL=gatsby-node.js.map