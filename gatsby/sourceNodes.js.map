{"version":3,"sources":["../src/gatsby/sourceNodes.js"],"names":["exports","sourceNodes","configOptions","actions","createNodeId","createContentDigest","createNode","endpoints","clientId","secret","storeHash","accessToken","hostname","preview","errMessage","console","log","FG_YELLOW","BC","BigCommerce","responseType","Object","keys","length","FG_GREEN","Promise","all","entries","map","nodeName","endpoint","get","then","res","resData","Array","isArray","data","datum","id","bigcommerce_id","parent","children","internal","type","content","contentDigest","catch","err","Error","finally","IS_DEV","webhookEndpoint","body","scope","is_active","destination","post","server","req","micro","json","request","productId","newProduct","nodeToUpdate","end","listen","exitMessage","error","FG_RED","onCreateDevServer","app","use","target","secure"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { createProxyMiddleware } from \"http-proxy-middleware\";\nimport micro from \"micro\";\nimport { FG_GREEN, FG_RED, FG_YELLOW, IS_DEV } from \"../constants\";\nimport BigCommerce from \"../utils/bigcommerce\";\nimport { handleConversionObjectToString } from \"../utils/convertValues\";\n\nexports.sourceNodes = async ({ actions, createNodeId, createContentDigest }, configOptions) => {\n\tconst { createNode } = actions;\n\tconst { endpoints = null, clientId = null, secret = null, storeHash = null, accessToken = null, hostname = null, preview = false } = configOptions;\n\n\t// Custom variables\n\tlet errMessage = \"\";\n\n\t// Send log message when checking for required options\n\tconsole.log(FG_YELLOW, \"\\nChecking BigCommerce plugin options... \");\n\n\tif (endpoints !== null && clientId !== null && secret !== null && storeHash !== null && accessToken !== null) {\n\t\t// Init new `BigCommerce` instance\n\t\tconst BC = new BigCommerce({\n\t\t\tclientId,\n\t\t\taccessToken,\n\t\t\tsecret,\n\t\t\tstoreHash,\n\t\t\tresponseType: \"json\"\n\t\t});\n\n\t\t// Handle fetching and creating nodes for a single or multiple endpoints\n\t\tif (endpoints && typeof endpoints === \"object\" && Object.keys(endpoints).length > 0) {\n\t\t\t// Send log message when fetching data\n\t\t\tconsole.log(FG_GREEN, \"\\nValid plugin options found. Proceeding with plugin initialization...\");\n\t\t\tconsole.log(FG_YELLOW, \"\\nRequesting endpoint data...\\n\");\n\n\t\t\tawait Promise.all(\n\t\t\t\tObject.entries(endpoints).map(([nodeName, endpoint]) => {\n\t\t\t\t\treturn BC.get(endpoint).then((res) => {\n\t\t\t\t\t\t// If the data object is not on the response, it could be `v2` which returns an array as the root, so use that as a fallback\n\t\t\t\t\t\tconst resData = \"data\" in res && Array.isArray(res.data) ? res.data : res;\n\n\t\t\t\t\t\t// Handle generating nodes\n\t\t\t\t\t\treturn \"data\" in res && Array.isArray(res.data)\n\t\t\t\t\t\t\t? resData.map((datum) =>\n\t\t\t\t\t\t\t\t\tcreateNode({\n\t\t\t\t\t\t\t\t\t\t...datum,\n\t\t\t\t\t\t\t\t\t\tid: createNodeId(`${datum.id + \"-\" + nodeName}`),\n\t\t\t\t\t\t\t\t\t\tbigcommerce_id: datum.id,\n\t\t\t\t\t\t\t\t\t\tparent: null,\n\t\t\t\t\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\t\t\t\t\tinternal: {\n\t\t\t\t\t\t\t\t\t\t\ttype: nodeName,\n\t\t\t\t\t\t\t\t\t\t\tcontent: handleConversionObjectToString(datum),\n\t\t\t\t\t\t\t\t\t\t\tcontentDigest: createContentDigest(datum)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: Array.isArray(res)\n\t\t\t\t\t\t\t? res.map((datum) =>\n\t\t\t\t\t\t\t\t\tcreateNode({\n\t\t\t\t\t\t\t\t\t\t...datum,\n\t\t\t\t\t\t\t\t\t\tid: createNodeId(`${datum.id + \"-\" + nodeName}`),\n\t\t\t\t\t\t\t\t\t\tbigcommerce_id: datum.id,\n\t\t\t\t\t\t\t\t\t\tparent: null,\n\t\t\t\t\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\t\t\t\t\tinternal: {\n\t\t\t\t\t\t\t\t\t\t\ttype: nodeName,\n\t\t\t\t\t\t\t\t\t\t\tcontent: handleConversionObjectToString(datum),\n\t\t\t\t\t\t\t\t\t\t\tcontentDigest: createContentDigest(datum)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: createNode({\n\t\t\t\t\t\t\t\t\t...resData,\n\t\t\t\t\t\t\t\t\tid: createNodeId(`${resData.id + \"-\" + nodeName}`),\n\t\t\t\t\t\t\t\t\tparent: null,\n\t\t\t\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\t\t\t\tinternal: {\n\t\t\t\t\t\t\t\t\t\ttype: nodeName,\n\t\t\t\t\t\t\t\t\t\tcontent: handleConversionObjectToString(resData),\n\t\t\t\t\t\t\t\t\t\tcontentDigest: createContentDigest(resData)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t  });\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t)\n\t\t\t\t.then(() => {\n\t\t\t\t\t// Send log message when all endpoints have been fetched\n\t\t\t\t\tconsole.log(FG_GREEN, \"\\nAll endpoint data have been fetched successfully.\");\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\t// Send log message when an error occurs\n\t\t\t\t\terrMessage = new Error(`An error occurred while fetching endpoint data. ${err}`);\n\t\t\t\t})\n\t\t\t\t.finally(() =>\n\t\t\t\t\t// Send log message when fetching data is complete\n\t\t\t\t\tconsole.log(FG_YELLOW, \"\\nRequesting endpoint data complete.\\n\")\n\t\t\t\t);\n\t\t} else {\n\t\t\terrMessage = new Error(\"The `endpoints` object is required to make any call to the BigCommerce API\");\n\t\t}\n\n\t\tif (IS_DEV && preview) {\n\t\t\t// Make a `POST` request to the BigCommerce API to subscribe to its webhook\n\t\t\tconst webhookEndpoint = \"/v3/hooks\";\n\t\t\tconst body = {\n\t\t\t\tscope: \"store/product/updated\",\n\t\t\t\tis_active: true,\n\t\t\t\tdestination: `${hostname}/__BCPreview`\n\t\t\t};\n\n\t\t\tBC.post(webhookEndpoint, body).then((res) => {\n\t\t\t\tif (\"data\" in res && Array.isArray(res.data)) {\n\t\t\t\t\tconst server = micro(async (req, res) => {\n\t\t\t\t\t\tconst request = await micro.json(req);\n\t\t\t\t\t\tconst productId = request.data.id;\n\n\t\t\t\t\t\t// Webhooks don't send any data, so we need to make a request to the BigCommerce API to get the product data\n\t\t\t\t\t\tconst newProduct = await BC.get(`/catalog/products/${productId}`);\n\t\t\t\t\t\tconst nodeToUpdate = newProduct.data;\n\n\t\t\t\t\t\tif (nodeToUpdate.id) {\n\t\t\t\t\t\t\tcreateNode({\n\t\t\t\t\t\t\t\t...nodeToUpdate,\n\t\t\t\t\t\t\t\tid: createNodeId(`${nodeToUpdate?.id ?? `BigCommerceNode`}`),\n\t\t\t\t\t\t\t\tparent: null,\n\t\t\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\t\t\tinternal: {\n\t\t\t\t\t\t\t\t\ttype: `BigCommerceNode`,\n\t\t\t\t\t\t\t\t\tcontentDigest: createContentDigest(nodeToUpdate)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconsole.log(FG_YELLOW, `\\nUpdated node: ${nodeToUpdate.id}`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Send a response back to the BigCommerce API\n\t\t\t\t\t\tres.end(\"ok\");\n\t\t\t\t\t});\n\n\t\t\t\t\tserver.listen(8033, console.log(FG_YELLOW, `\\nNow listening to changes for live preview at route /__BCPreview\\n`));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} else {\n\t\t// If `endpoints` is null, throw an error\n\t\tif (endpoints == null) {\n\t\t\terrMessage = new Error(\"The `endpoints` are required to make any call to the BigCommerce API\");\n\t\t}\n\n\t\t// If `clientId` is null, throw an error\n\t\tif (clientId == null) {\n\t\t\terrMessage = new Error(\"The `clientId` is required to make any call to the BigCommerce API\");\n\t\t}\n\n\t\t// If `secret` is null, throw an error\n\t\tif (secret == null) {\n\t\t\terrMessage = new Error(\"The `secret` is required to make any call to the BigCommerce API\");\n\t\t}\n\n\t\t// If `storeHash` is null, throw an error\n\t\tif (storeHash == null) {\n\t\t\terrMessage = new Error(\"The `storeHash` is required to make any call to the BigCommerce API\");\n\t\t}\n\n\t\t// If `accessToken` is null, throw an error\n\t\tif (accessToken == null) {\n\t\t\terrMessage = new Error(\"The `accessToken` is required to make any call to the BigCommerce API\");\n\t\t}\n\t}\n\n\tif (errMessage !== \"\") {\n\t\tconst exitMessage = \"\\nPlugin terminated with errors...\\n\";\n\n\t\tconsole.error(FG_RED, exitMessage);\n\n\t\tthrow errMessage;\n\t}\n};\n\nexports.onCreateDevServer = ({ app }) => {\n\tapp.use(\n\t\t\"/__BCPreview/\",\n\t\tcreateProxyMiddleware({\n\t\t\ttarget: `http://localhost:8033`,\n\t\t\tsecure: false\n\t\t})\n\t);\n};\n"],"file":"sourceNodes.js"}